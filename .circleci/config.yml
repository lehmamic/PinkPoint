version: 2.1
jobs:
  git-version:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.1

    steps:
      - run:
          name: install git version pre-requisites
          command: |
            apt-get update
            apt-get install -y --no-install-recommends \
              libc6 \
              zlib1g-dev \
              libcomerr2 \
              libc6-dev \
              libgcrypt20 \
              libkeyutils1 \
              libcurl3-gnutls \
              libsasl2-2 \
              libgpg-error0 \
              libcurl3

      - checkout

      - jq/install

      - run:
          name: install git version
          command: |
            dotnet tool install --global GitVersion.Tool --version 5.0.1
            echo "export PATH=$PATH:~/.dotnet/tools" >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: git version
          command: |
            dotnet-gitversion /nocache /output json >> git-version.json
            cat git-version.json
            for s in $(cat git-version.json | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
              echo "export $s" >> $BASH_ENV
            done
            source $BASH_ENV
            echo "$InformationalVersion"

      - persist_to_workspace:
          root: /root/project
          paths:
            - ./

  build_climbing_routes:
    docker:
      - image: circleci/node:lts

    steps:
      - attach_workspace:
          at: /home/circleci/project

      - setup_remote_docker

      - run:
          name: restore git version
          command: |
            cat git-version.json
            cat 
            for s in $(cat git-version.json | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
              echo "$s"
              echo "export $s" >> $BASH_ENV
            done
            source $BASH_ENV
            printenv

      - run:
          name: build docker image
          working_directory: ./src
          command: |
           docker build -t docker.pkg.github.com/lehmamic/pinkpoint/climbing-routes:${FullSemVer} -f PinkPoint.ClimbingRoutes/Dockerfile .

      - run:
          name: docker login
          command: docker login docker.pkg.github.com -u $DOCKER_USER -p $DOCKER_PASS

      - run:
          name: docker push
          command: docker push docker.pkg.github.com/lehmamic/pinkpoint/climbing-routes:${FullSemVer}

  deploy_climbing_routes:
    executor: azure-aks/default

    steps:
      - attach_workspace:
          at: /home/circleci/project

      - run:
          name: restore git version
          command: |
            cat git-version.json
            cat 
            for s in $(cat git-version.json | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
              echo "$s"
              echo "export $s" >> $BASH_ENV
            done
            source $BASH_ENV
            printenv

      - run:
          name: create helm chart
          working_directory: ./helm-charts
          command: |
            echo "$FullSemVer"
            echo "${FullSemVer}"
            sed "s/#{app-version}/${FullSemVer}/g" ./PinkPoint.ClimbingRoutes/Chart.yaml.template > ./PinkPoint.ClimbingRoutes/Chart.yaml
            cat ./PinkPoint.ClimbingRoutes/Chart.yaml
            sed "s/#{app-version}/${FullSemVer}/g" ./PinkPoint.ClimbingRoutes/values.yaml.template > ./PinkPoint.ClimbingRoutes/values.yaml
            cat ./PinkPoint.ClimbingRoutes/values.yaml

      - azure-cli/install

      - kubernetes/install

      - helm/install-helm-client:
          version: v2.14.1

      - azure-cli/login-with-service-principal

      - run:
          name: update kubeconfig with credentials
          command: az aks get-credentials --resource-group Kubernetes --name leh --subscription 6a1e4fbf-eda1-4431-a090-4ba9b4817bde

      - helm/upgrade-helm-chart:
          chart: ./helm-charts/PinkPoint.ClimbingRoutes
          namespace: pinkpoint
          release-name: pinkpoint.climbing-routes

  build_api_gateway:
    docker:
      - image: circleci/node:lts

    steps:
      - attach_workspace:
          at: /home/circleci/project

      - setup_remote_docker

      - run:
          name: restore git version
          command: |
            cat git-version.json
            cat 
            for s in $(cat git-version.json | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
              echo "$s"
              echo "export $s" >> $BASH_ENV
            done
            source $BASH_ENV
            printenv

      - run:
          name: build docker image
          working_directory: ./src
          command: |
           docker build -t docker.pkg.github.com/lehmamic/pinkpoint/api-gateway:${FullSemVer} -f PinkPoint.ApiGateway/Dockerfile .

      - run:
          name: docker login
          command: docker login docker.pkg.github.com -u $DOCKER_USER -p $DOCKER_PASS

      - run:
          name: docker push
          command: docker push docker.pkg.github.com/lehmamic/pinkpoint/api-gateway:${FullSemVer}

  deploy_api_gateway:
    executor: azure-aks/default

    steps:
      - attach_workspace:
          at: /home/circleci/project

      - run:
          name: restore git version
          command: |
            cat git-version.json
            cat 
            for s in $(cat git-version.json | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
              echo "$s"
              echo "export $s" >> $BASH_ENV
            done
            source $BASH_ENV
            printenv

      - run:
          name: create helm chart
          working_directory: ./helm-charts
          command: |
            echo "$FullSemVer"
            echo "${FullSemVer}"
            sed "s/#{app-version}/${FullSemVer}/g" ./PinkPoint.ApiGateway/Chart.yaml.template > ./PinkPoint.ApiGateway/Chart.yaml
            cat ./PinkPoint.ApiGateway/Chart.yaml
            sed "s/#{app-version}/${FullSemVer}/g" ./PinkPoint.ApiGateway/values.yaml.template > ./PinkPoint.ApiGateway/values.yaml
            cat ./PinkPoint.ApiGateway/values.yaml

      - azure-cli/install

      - kubernetes/install

      - helm/install-helm-client:
          version: v2.14.1

      - azure-cli/login-with-service-principal

      - run:
          name: update kubeconfig with credentials
          command: az aks get-credentials --resource-group Kubernetes --name leh --subscription 6a1e4fbf-eda1-4431-a090-4ba9b4817bde

      - helm/upgrade-helm-chart:
          chart: ./helm-charts/PinkPoint.ApiGateway
          namespace: pinkpoint
          release-name: pinkpoint.api-gateway

  build_cockpit:
    docker:
      - image: circleci/node:lts

    steps:
      - attach_workspace:
          at: /home/circleci/project

      - setup_remote_docker

      - run:
          name: restore git version
          command: |
            cat git-version.json
            cat 
            for s in $(cat git-version.json | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
              echo "$s"
              echo "export $s" >> $BASH_ENV
            done
            source $BASH_ENV
            printenv

      - run:
          name: build docker image
          working_directory: ./src
          command: |
           docker build -t docker.pkg.github.com/lehmamic/pinkpoint/cockpit:${FullSemVer} -f PinkPoint.Cockpit/Dockerfile .

      - run:
          name: docker login
          command: docker login docker.pkg.github.com -u $DOCKER_USER -p $DOCKER_PASS

      - run:
          name: docker push
          command: docker push docker.pkg.github.com/lehmamic/pinkpoint/cockpit:${FullSemVer}

  deploy_cockpit:
    executor: azure-aks/default

    steps:
      - attach_workspace:
          at: /home/circleci/project

      - run:
          name: restore git version
          command: |
            cat git-version.json
            cat 
            for s in $(cat git-version.json | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
              echo "$s"
              echo "export $s" >> $BASH_ENV
            done
            source $BASH_ENV
            printenv

      - run:
          name: create helm chart
          working_directory: ./helm-charts
          command: |
            echo "$FullSemVer"
            echo "${FullSemVer}"
            sed "s/#{app-version}/${FullSemVer}/g" ./PinkPoint.Cockpit/Chart.yaml.template > ./PinkPoint.Cockpit/Chart.yaml
            cat ./PinkPoint.Cockpit/Chart.yaml
            sed "s/#{app-version}/${FullSemVer}/g" ./PinkPoint.Cockpit/values.yaml.template > ./PinkPoint.Cockpit/values.yaml
            cat ./PinkPoint.Cockpit/values.yaml

      - azure-cli/install

      - kubernetes/install

      - helm/install-helm-client:
          version: v2.14.1

      - azure-cli/login-with-service-principal

      - run:
          name: update kubeconfig with credentials
          command: az aks get-credentials --resource-group Kubernetes --name leh --subscription 6a1e4fbf-eda1-4431-a090-4ba9b4817bde

      - helm/upgrade-helm-chart:
          chart: ./helm-charts/PinkPoint.Cockpit
          namespace: pinkpoint
          release-name: pinkpoint.cockpit

  build_identity_provider:
    docker:
      - image: circleci/node:lts

    steps:
      - attach_workspace:
          at: /home/circleci/project

      - setup_remote_docker

      - run:
          name: restore git version
          command: |
            cat git-version.json
            cat 
            for s in $(cat git-version.json | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
              echo "$s"
              echo "export $s" >> $BASH_ENV
            done
            source $BASH_ENV
            printenv

      - run:
          name: build docker image
          working_directory: ./src
          command: |
           docker build -t docker.pkg.github.com/lehmamic/pinkpoint/identity-provider:${FullSemVer} -f PinkPoint.IdentityProvider/Dockerfile .

      - run:
          name: docker login
          command: docker login docker.pkg.github.com -u $DOCKER_USER -p $DOCKER_PASS

      - run:
          name: docker push
          command: docker push docker.pkg.github.com/lehmamic/pinkpoint/identity-provider:${FullSemVer}

  deploy_identity_provider:
    executor: azure-aks/default

    steps:
      - attach_workspace:
          at: /home/circleci/project

      - run:
          name: restore git version
          command: |
            cat git-version.json
            cat 
            for s in $(cat git-version.json | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
              echo "$s"
              echo "export $s" >> $BASH_ENV
            done
            source $BASH_ENV
            printenv

      - run:
          name: create helm chart
          working_directory: ./helm-charts
          command: |
            echo "$FullSemVer"
            echo "${FullSemVer}"
            sed "s/#{app-version}/${FullSemVer}/g" ./PinkPoint.IdentityProvider/Chart.yaml.template > ./PinkPoint.IdentityProvider/Chart.yaml
            cat ./PinkPoint.IdentityProvider/Chart.yaml
            sed "s/#{app-version}/${FullSemVer}/g" ./PinkPoint.IdentityProvider/values.yaml.template > ./PinkPoint.IdentityProvider/values.yaml
            cat ./PinkPoint.IdentityProvider/values.yaml

      - azure-cli/install

      - kubernetes/install

      - helm/install-helm-client:
          version: v2.14.1

      - azure-cli/login-with-service-principal

      - run:
          name: update kubeconfig with credentials
          command: az aks get-credentials --resource-group Kubernetes --name leh --subscription 6a1e4fbf-eda1-4431-a090-4ba9b4817bde

      - helm/upgrade-helm-chart:
          chart: ./helm-charts/PinkPoint.IdentityProvider
          namespace: pinkpoint
          release-name: pinkpoint.identity-provider

  build_image_recognition:
    docker:
      - image: circleci/node:lts

    steps:
      - attach_workspace:
          at: /home/circleci/project

      - setup_remote_docker

      - run:
          name: restore git version
          command: |
            cat git-version.json
            cat 
            for s in $(cat git-version.json | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
              echo "$s"
              echo "export $s" >> $BASH_ENV
            done
            source $BASH_ENV
            printenv

      - run:
          name: build docker image
          working_directory: ./src
          command: |
           docker build -t docker.pkg.github.com/lehmamic/pinkpoint/image-recognition:${FullSemVer} -f PinkPoint.ImageRecognition/Dockerfile .

      - run:
          name: docker login
          command: docker login docker.pkg.github.com -u $DOCKER_USER -p $DOCKER_PASS

      - run:
          name: docker push
          command: docker push docker.pkg.github.com/lehmamic/pinkpoint/image-recognition:${FullSemVer}

  deploy_image_recognition:
    executor: azure-aks/default

    steps:
      - attach_workspace:
          at: /home/circleci/project

      - run:
          name: restore git version
          command: |
            cat git-version.json
            cat 
            for s in $(cat git-version.json | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
              echo "$s"
              echo "export $s" >> $BASH_ENV
            done
            source $BASH_ENV
            printenv

      - run:
          name: create helm chart
          working_directory: ./helm-charts
          command: |
            echo "$FullSemVer"
            echo "${FullSemVer}"
            sed "s/#{app-version}/${FullSemVer}/g" ./PinkPoint.ImageRecognition/Chart.yaml.template > ./PinkPoint.ImageRecognition/Chart.yaml
            cat ./PinkPoint.ImageRecognition/Chart.yaml
            sed "s/#{app-version}/${FullSemVer}/g" ./PinkPoint.ImageRecognition/values.yaml.template > ./PinkPoint.ImageRecognition/values.yaml
            cat ./PinkPoint.ImageRecognition/values.yaml

      - azure-cli/install

      - kubernetes/install

      - helm/install-helm-client:
          version: v2.14.1

      - azure-cli/login-with-service-principal

      - run:
          name: update kubeconfig with credentials
          command: az aks get-credentials --resource-group Kubernetes --name leh --subscription 6a1e4fbf-eda1-4431-a090-4ba9b4817bde

      - helm/upgrade-helm-chart:
          chart: ./helm-charts/PinkPoint.ImageRecognition
          namespace: pinkpoint
          release-name: pinkpoint.image-recognition

  build_route_search:
    docker:
      - image: circleci/node:lts

    steps:
      - attach_workspace:
          at: /home/circleci/project

      - setup_remote_docker

      - run:
          name: restore git version
          command: |
            cat git-version.json
            cat 
            for s in $(cat git-version.json | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
              echo "$s"
              echo "export $s" >> $BASH_ENV
            done
            source $BASH_ENV
            printenv

      - run:
          name: build docker image
          working_directory: ./src
          command: |
           docker build -t docker.pkg.github.com/lehmamic/pinkpoint/route-search:${FullSemVer} -f PinkPoint.RouteSearch/Dockerfile .

      - run:
          name: docker login
          command: docker login docker.pkg.github.com -u $DOCKER_USER -p $DOCKER_PASS

      - run:
          name: docker push
          command: docker push docker.pkg.github.com/lehmamic/pinkpoint/route-search:${FullSemVer}

  deploy_route_search:
    executor: azure-aks/default

    steps:
      - attach_workspace:
          at: /home/circleci/project

      - run:
          name: restore git version
          command: |
            cat git-version.json
            cat 
            for s in $(cat git-version.json | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
              echo "$s"
              echo "export $s" >> $BASH_ENV
            done
            source $BASH_ENV
            printenv

      - run:
          name: create helm chart
          working_directory: ./helm-charts
          command: |
            echo "$FullSemVer"
            echo "${FullSemVer}"
            sed "s/#{app-version}/${FullSemVer}/g" ./PinkPoint.RouteSearch/Chart.yaml.template > ./PinkPoint.RouteSearch/Chart.yaml
            cat ./PinkPoint.RouteSearch/Chart.yaml
            sed "s/#{app-version}/${FullSemVer}/g" ./PinkPoint.RouteSearch/values.yaml.template > ./PinkPoint.RouteSearch/values.yaml
            cat ./PinkPoint.RouteSearch/values.yaml

      - azure-cli/install

      - kubernetes/install

      - helm/install-helm-client:
          version: v2.14.1

      - azure-cli/login-with-service-principal

      - run:
          name: update kubeconfig with credentials
          command: az aks get-credentials --resource-group Kubernetes --name leh --subscription 6a1e4fbf-eda1-4431-a090-4ba9b4817bde

      - helm/upgrade-helm-chart:
          chart: ./helm-charts/PinkPoint.RouteSearch
          namespace: pinkpoint
          release-name: pinkpoint.route-search

  build_media:
    docker:
      - image: circleci/node:lts

    steps:
      - attach_workspace:
          at: /home/circleci/project

      - setup_remote_docker

      - run:
          name: restore git version
          command: |
            cat git-version.json
            cat 
            for s in $(cat git-version.json | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
              echo "$s"
              echo "export $s" >> $BASH_ENV
            done
            source $BASH_ENV
            printenv

      - run:
          name: build docker image
          working_directory: ./src
          command: |
           docker build -t docker.pkg.github.com/lehmamic/pinkpoint/media:${FullSemVer} -f PinkPoint.Media/Dockerfile .

      - run:
          name: docker login
          command: docker login docker.pkg.github.com -u $DOCKER_USER -p $DOCKER_PASS

      - run:
          name: docker push
          command: docker push docker.pkg.github.com/lehmamic/pinkpoint/media:${FullSemVer}

  deploy_media:
    executor: azure-aks/default

    steps:
      - attach_workspace:
          at: /home/circleci/project

      - run:
          name: restore git version
          command: |
            cat git-version.json
            cat 
            for s in $(cat git-version.json | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
              echo "$s"
              echo "export $s" >> $BASH_ENV
            done
            source $BASH_ENV
            printenv

      - run:
          name: create helm chart
          working_directory: ./helm-charts
          command: |
            echo "$FullSemVer"
            echo "${FullSemVer}"
            sed "s/#{app-version}/${FullSemVer}/g" ./PinkPoint.Media/Chart.yaml.template > ./PinkPoint.Media/Chart.yaml
            cat ./PinkPoint.Media/Chart.yaml
            sed "s/#{app-version}/${FullSemVer}/g" ./PinkPoint.Media/values.yaml.template > ./PinkPoint.Media/values.yaml
            cat ./PinkPoint.Media/values.yaml

      - azure-cli/install

      - kubernetes/install

      - helm/install-helm-client:
          version: v2.14.1

      - azure-cli/login-with-service-principal

      - run:
          name: update kubeconfig with credentials
          command: az aks get-credentials --resource-group Kubernetes --name leh --subscription 6a1e4fbf-eda1-4431-a090-4ba9b4817bde

      - helm/upgrade-helm-chart:
          chart: ./helm-charts/PinkPoint.Media
          namespace: pinkpoint
          release-name: pinkpoint.media

orbs:
  jq: circleci/jq@1.9.0
  azure-cli: circleci/azure-cli@1.0.0
  azure-aks: circleci/azure-aks@0.2.1
  kubernetes: circleci/kubernetes@0.4.0
  helm: circleci/helm@0.2.0

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - git-version

      - build_climbing_routes:
          requires:
            - git-version

      - deploy_climbing_routes:
          requires:
            - build_climbing_routes

      - build_api_gateway:
          requires:
            - git-version

      - deploy_api_gateway:
          requires:
            - build_api_gateway

      - build_cockpit:
          requires:
            - git-version

      - deploy_cockpit:
          requires:
            - build_cockpit

      - build_identity_provider:
          requires:
            - git-version

      - deploy_identity_provider:
          requires:
            - build_identity_provider

      - build_image_recognition:
          requires:
            - git-version

      - deploy_image_recognition:
          requires:
            - build_image_recognition

      - build_route_search:
          requires:
            - git-version

      - deploy_route_search:
          requires:
            - build_route_search

      - build_media:
          requires:
            - git-version

      - deploy_media:
          requires:
            - build_media